{1 Subprocess: abstractions for IO with unix processes}

{!Subprocess} is a module which attempts to make working with unix
processes in OCaml safer and simpler (in that order). 

{3 Safety features}

Several features are inlcuded in {!Subprocess} to improve the safety
and correctness of programs which launch other programs. It is not
perfect in this regard, but it does try to aliviate many of the common
pitfalls when working with processes.

{4 No Shell}

Commands in {!Subprocess} never recieve a shell. We've had enough
injection CEVs in the past several decades that it's time to stop
giving our commands a shell. I realize redirection tends to be a bit
easier to be a bit easier with a shell, but Subprocess provides
combinators to make it as easy as possible (but no easier!) to do IO
redirection--and indeed, this is the main point of the library.

The user is, of course free to do the equivalent of
[/bin/sh -c "echo foo"], i.e.
[Subprocess.cmd ["/bin/sh"; "-c"; "echo foo"]] but it's your own affair
at that point--and you're probably better off using functions provided
by the standard library or the [Unix] library at this point--but I
believe you will find that {!Subprocess} provides a better way to do 
most things.

{4 Non-zero exit status is (normally) an error}

Another "feature not a bug" of Subprocess is that, by default, a
non-zero exit status is considered a failure and will produce an error
in OCaml. In the top-level functions of the {!Subprocess} module, this
means raising an exception. If you, like me, prefer to handle errors
with result types, the {!Subprocess.Results} module is provided to
represent non-zero exit status as an [Error of] {!Subprocess.Exit.t}. A
combinator is provided convert this to [Error of string] for better
composition with other result types in the context of monadic binding.

However, I realize that a non-zero exit status is not always an error,
and for this, the {!Subprocess.Unchecked} module is provided. This
module is also useful if you are interested in the output of a process
regardless of the exit status.

{4 Cleanup is abstracted }

Suprocess attempts to avoid making the user handle closing processes
and pipes expliciitly by providing several functions which simply read
process output, close all pipes and wait for the process to exit before
returning the output (or error). There is also family of fold functions
which fold over line output from a running process, but clean
everything up before returning.

For running process interaction, the running process is passed to
a user-provided function and everything is properly closed when the
function exits--either by being fully evaluated or by raising an
exception.

If for some reason you need to pass around a live process in a wider
context, {!Subprocess.Exec.exec} makes this possible, but you have to
clean up your own mess at that point.

{3 Extras}

Subprocess generally does not use many any opaque types and practically
everything has a pretty printer for easier debugging. The lack of
opaque types is not an {i invitation} to go digging into the
implementation details  {i which are subject to change}, but rather an
acknowledgement that no abstraction is perfect and there may at times
valid reasons to dig into them.

{4 Opt-in non-blocking IO}

Subprocess supports non-blocking IO, but it does not provide direct
compatibility layers with popular OCaml ascynchronous IO libraries like
lwt and eio, which typically provide their own process abstractions.
Neither does Subprocess provide its own event loop. The user must
handle non-blocking IO operations and process polling manually where
non-blocking behavior is desired. It is not different from handling
non-blocking IO in the OCaml standard library and examples will be
provided here where relevant.

Perhaps compatibility with lwt and / or eio will be a goal for a future
version of Subprocess.

{2 Introductory examples}

The most fundamental abstraction in Subprocess is {!Subprocess.Cmd.t}
It is simply a data representation of a yet-to-be-executed command,
and contains information about arguments, I/O redirection, environment
variables and blocking.

{[
  # open Subprocess;;
  # let my_cmd = cmd ["echo"; "foo"];;
  val my_cmd : (stdin, stdout, stderr) Cmd.t = cmd(`echo foo`)
  # Format.printf "%a\n" Cmd.pp my_cmd;;
  cmd(`echo foo`)
]}

As you can see, the command also has type parameters related to each of
the standard streams, which both gives us more information as
programmers, but also turns certain failure cases for I/O into type
errors.

A number of combinators are defined at the end of {!Subprocess.Core}
which may be used to redirect the standard streams, as well as set
environment variables and use non-blocking I/O for pipes. {i Subprocess
will either unblock all pipes or none. More on that later.}

For example: